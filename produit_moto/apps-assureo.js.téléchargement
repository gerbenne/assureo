var _____WB$wombat$assign$function_____ = function(name) {return (self._wb_wombat && self._wb_wombat.local_init && self._wb_wombat.local_init(name)) || self[name]; };
if (!self.__WB_pmw) { self.__WB_pmw = function(obj) { this.__WB_source = obj; return this; } }
{
  let window = _____WB$wombat$assign$function_____("window");
  let self = _____WB$wombat$assign$function_____("self");
  let document = _____WB$wombat$assign$function_____("document");
  let location = _____WB$wombat$assign$function_____("location");
  let top = _____WB$wombat$assign$function_____("top");
  let parent = _____WB$wombat$assign$function_____("parent");
  let frames = _____WB$wombat$assign$function_____("frames");
  let opener = _____WB$wombat$assign$function_____("opener");


$(document).ready(function () {
	 Drupal.behaviors.assureo_custom = {
			    // Put custom js here.
			    attach: function(context) {
			      $('.paybox-auto-submit-click').click();
			    }
	  };
});

Drupal.behaviors.exampleModule = {
  attach: function (context, settings) {
    $('#date-circulation input').on('mouseout', function() { $(this).blur() });
  }
};


/**
 * amaeDateFormatting(p_event)
 *
 * @param p_event
 * @returns {boolean|*}
 */
function amaeDateFormatting(p_event) {

  var input = p_event.target;
  var date  = input.value.replace(new RegExp("/[^\d]/gi", 'g'), "");
  formatOk = true;

  var dateTab=CutDateWithoutSeparator(date);
  if(CheckDate(dateTab[0],dateTab[1],dateTab[2])) {
    input.value = FormatDate(dateTab[0],dateTab[1],dateTab[2]);
  } else {
    formatOk = false;
    //input.value="";
  }
  return formatOk;

}

/**
 * CutDateWithoutSeparator(date)
 *
 * @param date
 * @returns {Array}
 * @constructor
 */
function CutDateWithoutSeparator(date) {
    var dateTab = new Array();
    if (date.length < 5) {
        dateTab[2] = date.substring(2, date.length);
        dateTab[1] = date.substring(1, 2);
        dateTab[0] = date.substring(0, 1);
    } else if (date.length == 5) {
        if (date.substring(1, 3) > 12) {
            dateTab[2] = date.substring(3, 5);
            dateTab[1] = date.substring(2, 3);
            dateTab[0] = date.substring(0, 2);
        } else {
            dateTab[2] = date.substring(3, 5);
            dateTab[1] = date.substring(1, 3);
            dateTab[0] = date.substring(0, 1);
        }
    } else if (date.length == 6) {
        if (date.substring(2, 4) > 12) {
            dateTab[2] = date.substring(2, 6);
            dateTab[1] = date.substring(1, 2);
            dateTab[0] = date.substring(0, 1);
        } else {
            dateTab[2] = date.substring(4, 6);
            dateTab[1] = date.substring(2, 4);
            dateTab[0] = date.substring(0, 2);
        }
    } else if (date.length == 7) {
        if (date.substring(1, 3) > 12) {
            dateTab[2] = date.substring(3, 7);
            dateTab[1] = date.substring(2, 3);
            dateTab[0] = date.substring(0, 2);
        } else {
            dateTab[2] = date.substring(3, 7);
            dateTab[1] = date.substring(1, 3);
            dateTab[0] = date.substring(0, 1);
        }
    } else if (date.length == 8) {
        dateTab[2] = date.substring(4, 8);
        dateTab[1] = date.substring(2, 4);
        dateTab[0] = date.substring(0, 2);
    }
    return dateTab;
}

/**
 * CheckDate(day, month, year)
 *
 * @param day
 * @param month
 * @param year
 * @returns {boolean}
 * @constructor
 */
function CheckDate(day, month, year) {

    if (isNaN(day) || day < 1 || day > 31)
        return (false);
    if (isNaN(month) || month < 1 || month > 12)
        return (false);

    if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30)
        return (false);

    year = FormatYear(year);
    if (isNaN(year) || (year % 4 != 0 && month == "02" && day > 28) || year < 0 || (year.indexOf("+") != -1) || (year.indexOf(".") != -1))
        return (false);

    return (true);
}

/**
 * FormatYear(year)
 *
 * @param year
 * @returns {*}
 * @constructor
 */
function FormatYear(year) {
    if (!isNaN(year)) {
        year = (year.length == 1) ? "0" + year : year;
        return ((year.length == 2) ? ((year < 20) ? "20" + year : "19" + year) : year);
    }
}

/**
 * FormatDate(day, month, year)
 *
 * @param day
 * @param month
 * @param year
 * @returns {string}
 * @constructor
 */
function FormatDate(day, month, year) {
    day = (day.length == 1) ? "0" + day : day;
    month = (month.length == 1) ? "0" + month : month;
    year = FormatYear(year);
    return (day + "/" + month + "/" + year);
}

}
/*
     FILE ARCHIVED ON 04:32:02 Mar 28, 2021 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 14:39:02 Jul 06, 2021.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
*/
/*
playback timings (ms):
  captures_list: 381.642
  exclusion.robots: 0.179
  exclusion.robots.policy: 0.167
  RedisCDXSource: 5.596
  esindex: 0.014
  LoadShardBlock: 350.128 (3)
  PetaboxLoader3.datanode: 46.622 (4)
  CDXLines.iter: 21.505 (3)
  PetaboxLoader3.resolve: 345.995 (2)
  load_resource: 50.032
*/